/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in realtime.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client;

import de.irisnet.java.ApiException;
import de.irisnet.java.client.model.Error;
import java.io.File;
import de.irisnet.java.client.model.INDefineAI;
import de.irisnet.java.client.model.INParams;
import de.irisnet.java.client.model.IrisNet;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AiOperationsApi
 */
@Ignore
public class AiOperationsApiTest {

    private final AiOperationsApi api = new AiOperationsApi();

    
    /**
     * Upload and check image against previously chosen configuration.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkImageTest() throws ApiException {
        String licenseKey = null;
        Integer detail = null;
        File file = null;
        IrisNet response = api.checkImage(licenseKey, detail, file);

        // TODO: test validations
    }
    
    /**
     * Check image url against previously chosen configuration.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkImageUrlTest() throws ApiException {
        String url = null;
        String licenseKey = null;
        Integer detail = null;
        IrisNet response = api.checkImageUrl(url, licenseKey, detail);

        // TODO: test validations
    }
    
    /**
     * Get the resulting image file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadProcessedTest() throws ApiException {
        String filename = null;
        File response = api.downloadProcessed(filename);

        // TODO: test validations
    }
    
    /**
     * Set definitions via pre-defined prototypes.
     *
     * Each available prototype groups together a pre-defined set of parameters that will define the behaviour of the AI. Additionally you can overwrite specific parameters using &#39;set-parameters&#39;. Any prior request to &#39;set-parameters&#39; are invalidated when calling this request. This can also be used to reset the AI configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setINDefineTest() throws ApiException {
        INDefineAI inDefineAI = null;
        api.setINDefine(inDefineAI);

        // TODO: test validations
    }
    
    /**
     * Set the behaviour parameters for one object class.
     *
     * Overwrites or extends the default configuration of the AI. By setting precise behaviour parameters, the AI can be fine tuned for specific use cases. To reset the parameters to their default values, make a post request to &#39;set-definition&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setINParamsTest() throws ApiException {
        INParams inParams = null;
        api.setINParams(inParams);

        // TODO: test validations
    }
    
}
