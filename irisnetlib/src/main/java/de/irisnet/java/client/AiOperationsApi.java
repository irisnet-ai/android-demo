/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in realtime.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client;

import de.irisnet.java.ApiCallback;
import de.irisnet.java.ApiClient;
import de.irisnet.java.ApiException;
import de.irisnet.java.ApiResponse;
import de.irisnet.java.Configuration;
import de.irisnet.java.Pair;
import de.irisnet.java.ProgressRequestBody;
import de.irisnet.java.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.irisnet.java.client.model.Error;
import java.io.File;
import de.irisnet.java.client.model.INDefineAI;
import de.irisnet.java.client.model.INParams;
import de.irisnet.java.client.model.IrisNet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AiOperationsApi {
    private ApiClient localVarApiClient;

    public AiOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AiOperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for checkImage
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkImageCall(String licenseKey, Integer detail, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/check-image/{licenseKey}"
            .replaceAll("\\{" + "licenseKey" + "\\}", localVarApiClient.escapeString(licenseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkImageValidateBeforeCall(String licenseKey, Integer detail, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'licenseKey' is set
        if (licenseKey == null) {
            throw new ApiException("Missing the required parameter 'licenseKey' when calling checkImage(Async)");
        }
        

        okhttp3.Call localVarCall = checkImageCall(licenseKey, detail, file, _callback);
        return localVarCall;

    }

    /**
     * Upload and check image against previously chosen configuration.
     * 
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @param file  (optional)
     * @return IrisNet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public IrisNet checkImage(String licenseKey, Integer detail, File file) throws ApiException {
        ApiResponse<IrisNet> localVarResp = checkImageWithHttpInfo(licenseKey, detail, file);
        return localVarResp.getData();
    }

    /**
     * Upload and check image against previously chosen configuration.
     * 
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @param file  (optional)
     * @return ApiResponse&lt;IrisNet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IrisNet> checkImageWithHttpInfo(String licenseKey, Integer detail, File file) throws ApiException {
        okhttp3.Call localVarCall = checkImageValidateBeforeCall(licenseKey, detail, file, null);
        Type localVarReturnType = new TypeToken<IrisNet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload and check image against previously chosen configuration. (asynchronously)
     * 
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkImageAsync(String licenseKey, Integer detail, File file, final ApiCallback<IrisNet> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkImageValidateBeforeCall(licenseKey, detail, file, _callback);
        Type localVarReturnType = new TypeToken<IrisNet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkImageUrl
     * @param url  (required)
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkImageUrlCall(String url, String licenseKey, Integer detail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/check-url/{licenseKey}"
            .replaceAll("\\{" + "licenseKey" + "\\}", localVarApiClient.escapeString(licenseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkImageUrlValidateBeforeCall(String url, String licenseKey, Integer detail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling checkImageUrl(Async)");
        }
        
        // verify the required parameter 'licenseKey' is set
        if (licenseKey == null) {
            throw new ApiException("Missing the required parameter 'licenseKey' when calling checkImageUrl(Async)");
        }
        

        okhttp3.Call localVarCall = checkImageUrlCall(url, licenseKey, detail, _callback);
        return localVarCall;

    }

    /**
     * Check image url against previously chosen configuration.
     * 
     * @param url  (required)
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @return IrisNet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public IrisNet checkImageUrl(String url, String licenseKey, Integer detail) throws ApiException {
        ApiResponse<IrisNet> localVarResp = checkImageUrlWithHttpInfo(url, licenseKey, detail);
        return localVarResp.getData();
    }

    /**
     * Check image url against previously chosen configuration.
     * 
     * @param url  (required)
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @return ApiResponse&lt;IrisNet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IrisNet> checkImageUrlWithHttpInfo(String url, String licenseKey, Integer detail) throws ApiException {
        okhttp3.Call localVarCall = checkImageUrlValidateBeforeCall(url, licenseKey, detail, null);
        Type localVarReturnType = new TypeToken<IrisNet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check image url against previously chosen configuration. (asynchronously)
     * 
     * @param url  (required)
     * @param licenseKey License obtained from irisnet.de shop. (required)
     * @param detail Sets the response details. Use 1 for minimum detail (better API performance), 2 for medium details and 3 for all details. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Not enough credits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkImageUrlAsync(String url, String licenseKey, Integer detail, final ApiCallback<IrisNet> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkImageUrlValidateBeforeCall(url, licenseKey, detail, _callback);
        Type localVarReturnType = new TypeToken<IrisNet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadProcessed
     * @param filename  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Specified file was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the file AI produced file with masking or blurring, depending on given AI parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadProcessedCall(String filename, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/download/{filename}"
            .replaceAll("\\{" + "filename" + "\\}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadProcessedValidateBeforeCall(String filename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling downloadProcessed(Async)");
        }
        

        okhttp3.Call localVarCall = downloadProcessedCall(filename, _callback);
        return localVarCall;

    }

    /**
     * Get the resulting image file.
     * 
     * @param filename  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Specified file was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the file AI produced file with masking or blurring, depending on given AI parameters. </td><td>  -  </td></tr>
     </table>
     */
    public File downloadProcessed(String filename) throws ApiException {
        ApiResponse<File> localVarResp = downloadProcessedWithHttpInfo(filename);
        return localVarResp.getData();
    }

    /**
     * Get the resulting image file.
     * 
     * @param filename  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Specified file was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the file AI produced file with masking or blurring, depending on given AI parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadProcessedWithHttpInfo(String filename) throws ApiException {
        okhttp3.Call localVarCall = downloadProcessedValidateBeforeCall(filename, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the resulting image file. (asynchronously)
     * 
     * @param filename  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Specified file was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the file AI produced file with masking or blurring, depending on given AI parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadProcessedAsync(String filename, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadProcessedValidateBeforeCall(filename, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setINDefine
     * @param inDefineAI  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setINDefineCall(INDefineAI inDefineAI, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inDefineAI;

        // create path and map variables
        String localVarPath = "/v1/set-definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setINDefineValidateBeforeCall(INDefineAI inDefineAI, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inDefineAI' is set
        if (inDefineAI == null) {
            throw new ApiException("Missing the required parameter 'inDefineAI' when calling setINDefine(Async)");
        }
        

        okhttp3.Call localVarCall = setINDefineCall(inDefineAI, _callback);
        return localVarCall;

    }

    /**
     * Set definitions via pre-defined prototypes.
     * Each available prototype groups together a pre-defined set of parameters that will define the behaviour of the AI. Additionally you can overwrite specific parameters using &#39;set-parameters&#39;. Any prior request to &#39;set-parameters&#39; are invalidated when calling this request. This can also be used to reset the AI configuration.
     * @param inDefineAI  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void setINDefine(INDefineAI inDefineAI) throws ApiException {
        setINDefineWithHttpInfo(inDefineAI);
    }

    /**
     * Set definitions via pre-defined prototypes.
     * Each available prototype groups together a pre-defined set of parameters that will define the behaviour of the AI. Additionally you can overwrite specific parameters using &#39;set-parameters&#39;. Any prior request to &#39;set-parameters&#39; are invalidated when calling this request. This can also be used to reset the AI configuration.
     * @param inDefineAI  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setINDefineWithHttpInfo(INDefineAI inDefineAI) throws ApiException {
        okhttp3.Call localVarCall = setINDefineValidateBeforeCall(inDefineAI, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set definitions via pre-defined prototypes. (asynchronously)
     * Each available prototype groups together a pre-defined set of parameters that will define the behaviour of the AI. Additionally you can overwrite specific parameters using &#39;set-parameters&#39;. Any prior request to &#39;set-parameters&#39; are invalidated when calling this request. This can also be used to reset the AI configuration.
     * @param inDefineAI  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setINDefineAsync(INDefineAI inDefineAI, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setINDefineValidateBeforeCall(inDefineAI, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setINParams
     * @param inParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setINParamsCall(INParams inParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inParams;

        // create path and map variables
        String localVarPath = "/v1/set-parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setINParamsValidateBeforeCall(INParams inParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inParams' is set
        if (inParams == null) {
            throw new ApiException("Missing the required parameter 'inParams' when calling setINParams(Async)");
        }
        

        okhttp3.Call localVarCall = setINParamsCall(inParams, _callback);
        return localVarCall;

    }

    /**
     * Set the behaviour parameters for one object class.
     * Overwrites or extends the default configuration of the AI. By setting precise behaviour parameters, the AI can be fine tuned for specific use cases. To reset the parameters to their default values, make a post request to &#39;set-definition&#39;.
     * @param inParams  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void setINParams(INParams inParams) throws ApiException {
        setINParamsWithHttpInfo(inParams);
    }

    /**
     * Set the behaviour parameters for one object class.
     * Overwrites or extends the default configuration of the AI. By setting precise behaviour parameters, the AI can be fine tuned for specific use cases. To reset the parameters to their default values, make a post request to &#39;set-definition&#39;.
     * @param inParams  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setINParamsWithHttpInfo(INParams inParams) throws ApiException {
        okhttp3.Call localVarCall = setINParamsValidateBeforeCall(inParams, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the behaviour parameters for one object class. (asynchronously)
     * Overwrites or extends the default configuration of the AI. By setting precise behaviour parameters, the AI can be fine tuned for specific use cases. To reset the parameters to their default values, make a post request to &#39;set-definition&#39;.
     * @param inParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad request. Check for badly formatted request body. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setINParamsAsync(INParams inParams, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setINParamsValidateBeforeCall(inParams, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
